import{n as r,B as i,a as c}from"./notificationStore.6f5071e2.js";import{j as h}from"./singletons.8869f9cf.js";import{w as A}from"./index.d28b6c62.js";import"./index.a9363749.js";const n=h("goto");function E(a,e){switch(a){case"admin":n("/dashboard");break;case"user":n("/user");break;default:n("/")}}const d=A({userId:null,role:null,isAuthenticated:!1}),I=(a,e)=>{let t;switch(console.log(a.message),a.message){case"INVALID_CREDENTIALS":t=e("validation.INVALID_CREDENTIALS");break;case"RATE_LIMIT":t=e("validation.RATE_LIMIT");break;case"EMAIL_NOT_VERIFIED":t=e("validation.EMAIL_NOT_VERIFIED");break;default:t="Une erreur inconnue s'est produite."}r.addNotification(t,"error")},f=(a,e)=>{let t=[];typeof a=="string"?t=a.split(","):a&&a.message?t=a.message.split(","):t=["Une erreur inconnue s'est produite."],t.forEach(o=>{let s;switch(o.trim()){case"EMAIL_EXIST":s=e("validation.EMAIL_EXIST");break;case"USERNAME_REQUIRED":s=e("validation.USERNAME_REQUIRED");break;case"VALID_EMAIL":s=e("validation.VALID_EMAIL");break;case"VALID_USERNAME":s=e("validation.VALID_USERNAME");break;case"NUMBE_CARAC_PASSWORD":s=e("validation.NUMBE_CARAC_PASSWORD");break;case"MIN_PASSWORD":s=e("validation.MIN_PASSWORD");break;case"MAJ_PASSWORD":s=e("validation.MAJ_PASSWORD");break;case"NUMBER_PASSWORD":s=e("validation.NUMBER_PASSWORD");break;case"SPECIAL_CARAC_PASSWORD":s=e("validation.SPECIAL_CARAC_PASSWORD");break;case"RATE_LIMIT":s=e("validation.RATE_LIMIT");break;default:s="Une erreur inconnue s'est produite."}r.addNotification(s,"error")})},S=(a,e)=>{let t;switch(a.message){case"VALID_EMAIL":t=e("validation.VALID_EMAIL");break;case"USER_NOT_FOUND":t=e("validation.USER_NOT_FOUND");break;case"EMAIL_NOT_VERIFIED":t=e("validation.EMAIL_NOT_VERIFIED");break;case"RATE_LIMIT":t=e("validation.RATE_LIMIT");break;default:t="Une erreur inconnue s'est produite."}r.addNotification(t,"error")};async function _(a){try{(await fetch(`${i}/auth/logout`,{method:"GET",credentials:"include"})).ok&&(r.addNotification(a("logout.successLogout"),"success"),d.set({userId:null,role:null,isAuthenticated:!1}),n("/"))}catch{}}let l;d.subscribe(a=>{l=a});async function D(){try{const a=await fetch(`${i}/auth/check-auth`,{credentials:"include"});if(a.ok){const e=await a.json();d.update(t=>({...t,isAuthenticated:e.isAuthenticated,role:e.role,userId:e.userId}))}}catch{}}async function L(a,e,t){try{const o=await c({url:`${i}/auth/login`,method:"POST",credentials:"include",body:{email:a,password:e}});console.log(o),d.set({role:o.role,isAuthenticated:!0,userId:o.userId});const{role:s,isAuthenticated:u}=l;E(s??"defaultRole",u),r.addNotification(t("validation.SUCCESS_LOGIN"),"success")}catch(o){throw I(o,t),o}}async function O(a,e,t,o){try{(await c({url:`${i}/auth/signup`,method:"POST",credentials:"include",body:{username:a,email:e,password:t}})).success&&(n("/"),r.addNotification(o("validation.SUCCESS_INSCRIPTION"),"success"))}catch(s){throw f(s,o),s}}async function g(a,e){try{(await fetch(`${i}/auth/verify/${a}`)).ok&&(n("/"),r.addNotification(e("validation.EMAIL_VERIFIED"),"success"))}catch{}}async function M(a,e){try{(await c({url:`${i}/auth/forgot-password`,method:"POST",credentials:"include",body:{email:a}})).success&&(n("/"),r.addNotification(e("validation.EMAIL_FORGOT_PASSWORD"),"success"))}catch(t){throw S(t,e),t}}async function y(a,e,t,o){try{const s=await fetch(`${i}/auth/forgot-password/${a}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newPassword:e,confirmPassword:t})});if(s.ok)n("/"),r.addNotification(o("validation.VALIDATION_FORGOT_PASSWORD"),"success");else{const u=await s.json();r.addNotification(o("validation.FORGOT_PASSWORD_INVALID"),"error")}}catch(s){console.log("Caught error:",s),r.addNotification(s.message,"error")}}async function p(){try{const a=new Headers;return await c({url:`${i}/auth/user`,method:"GET",headers:a,credentials:"include"})}catch(a){throw a}}const b=async(a,e)=>{try{const t=new Headers,o=await c({url:`${i}/auth/user/update`,method:"PUT",headers:t,credentials:"include",body:a});if(o.success)return r.addNotification(e("validation.UPDATE_SUCCESS"),"success"),o.notification&&(r.addNotification(o.notification,"success"),_(e)),o;throw new Error(e("validation.UPDATE_FAILURE"))}catch(t){throw t}};async function m(){try{const a=new Headers,e=await c({url:`${i}/auth/admin/users`,method:"GET",headers:a,credentials:"include"});if(e.users)return e.users;throw new Error("Erreur lors de la récupération des utilisateurs")}catch(a){throw a}}async function U(a,e){try{const t=new Headers,o=await c({url:`${i}/auth/admin/user/${a}`,method:"PUT",headers:t,body:e});if(o.success)return{success:!0,user:o.updatedUser,notification:o.notification};throw new Error("Erreur lors de la mise à jour de l'utilisateur")}catch(t){throw t}}export{y as R,d as a,m as b,D as c,L as d,O as e,p as f,n as g,b as h,_ as l,M as s,U as u,g as v};
