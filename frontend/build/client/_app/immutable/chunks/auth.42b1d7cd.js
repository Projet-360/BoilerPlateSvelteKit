import{n as r,a as n}from"./notificationStore.e8f881ab.js";import{j as u}from"./singletons.c69f1815.js";import{w as h}from"./index.d28b6c62.js";import"./index.a9363749.js";const i=u("goto");function A(e,a){switch(e){case"admin":i("/dashboard");break;case"user":i("/user");break;default:i("/")}}const c=h({userId:null,role:null,isAuthenticated:!1}),E=(e,a)=>{let t;switch(console.log(e.message),e.message){case"INVALID_CREDENTIALS":t=a("validation.INVALID_CREDENTIALS");break;case"RATE_LIMIT":t=a("validation.RATE_LIMIT");break;case"EMAIL_NOT_VERIFIED":t=a("validation.EMAIL_NOT_VERIFIED");break;default:t="Une erreur inconnue s'est produite."}r.addNotification(t,"error")},I=(e,a)=>{let t=[];typeof e=="string"?t=e.split(","):e&&e.message?t=e.message.split(","):t=["Une erreur inconnue s'est produite."],t.forEach(o=>{let s;switch(o.trim()){case"EMAIL_EXIST":s=a("validation.EMAIL_EXIST");break;case"USERNAME_REQUIRED":s=a("validation.USERNAME_REQUIRED");break;case"VALID_EMAIL":s=a("validation.VALID_EMAIL");break;case"VALID_USERNAME":s=a("validation.VALID_USERNAME");break;case"NUMBE_CARAC_PASSWORD":s=a("validation.NUMBE_CARAC_PASSWORD");break;case"MIN_PASSWORD":s=a("validation.MIN_PASSWORD");break;case"MAJ_PASSWORD":s=a("validation.MAJ_PASSWORD");break;case"NUMBER_PASSWORD":s=a("validation.NUMBER_PASSWORD");break;case"SPECIAL_CARAC_PASSWORD":s=a("validation.SPECIAL_CARAC_PASSWORD");break;case"RATE_LIMIT":s=a("validation.RATE_LIMIT");break;default:s="Une erreur inconnue s'est produite."}r.addNotification(s,"error")})},f=(e,a)=>{let t;switch(e.message){case"VALID_EMAIL":t=a("validation.VALID_EMAIL");break;case"USER_NOT_FOUND":t=a("validation.USER_NOT_FOUND");break;case"EMAIL_NOT_VERIFIED":t=a("validation.EMAIL_NOT_VERIFIED");break;case"RATE_LIMIT":t=a("validation.RATE_LIMIT");break;default:t="Une erreur inconnue s'est produite."}r.addNotification(t,"error")};async function S(e){try{(await fetch("http://localhost:2000/auth/logout",{method:"GET",credentials:"include"})).ok&&(r.addNotification(e("logout.successLogout"),"success"),c.set({userId:null,role:null,isAuthenticated:!1}),i("/"))}catch{}}let l;c.subscribe(e=>{l=e});async function N(){try{const e=await fetch("http://localhost:2000/auth/check-auth",{credentials:"include"});if(e.ok){const a=await e.json();c.update(t=>({...t,isAuthenticated:a.isAuthenticated,role:a.role,userId:a.userId}))}}catch{}}async function T(e,a,t){try{const o=await n({url:"http://localhost:2000/auth/login",method:"POST",credentials:"include",body:{email:e,password:a}});console.log(o),c.set({role:o.role,isAuthenticated:!0,userId:o.userId});const{role:s,isAuthenticated:d}=l;A(s??"defaultRole",d),r.addNotification(t("validation.SUCCESS_LOGIN"),"success")}catch(o){throw E(o,t),o}}async function D(e,a,t,o){try{(await n({url:"http://localhost:2000/auth/signup",method:"POST",credentials:"include",body:{username:e,email:a,password:t}})).success&&(i("/"),r.addNotification(o("validation.SUCCESS_INSCRIPTION"),"success"))}catch(s){throw I(s,o),s}}async function L(e,a){try{(await fetch(`http://localhost:2000/auth/verify/${e}`)).ok&&(i("/"),r.addNotification(a("validation.EMAIL_VERIFIED"),"success"))}catch{}}async function O(e,a){try{(await n({url:"http://localhost:2000/auth/forgot-password",method:"POST",credentials:"include",body:{email:e}})).success&&(i("/"),r.addNotification(a("validation.EMAIL_FORGOT_PASSWORD"),"success"))}catch(t){throw f(t,a),t}}async function g(e,a,t,o){try{const s=await fetch(`http://localhost:2000/auth/forgot-password/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newPassword:a,confirmPassword:t})});if(s.ok)i("/"),r.addNotification(o("validation.VALIDATION_FORGOT_PASSWORD"),"success");else{const d=await s.json();r.addNotification(o("validation.FORGOT_PASSWORD_INVALID"),"error")}}catch(s){console.log("Caught error:",s),r.addNotification(s.message,"error")}}async function M(){try{const e=new Headers;return await n({url:"http://localhost:2000/auth/user",method:"GET",headers:e,credentials:"include"})}catch(e){throw e}}const y=async(e,a)=>{try{const t=new Headers,o=await n({url:"http://localhost:2000/auth/user/update",method:"PUT",headers:t,credentials:"include",body:e});if(o.success)return r.addNotification(a("validation.UPDATE_SUCCESS"),"success"),o.notification&&(r.addNotification(o.notification,"success"),S(a)),o;throw new Error(a("validation.UPDATE_FAILURE"))}catch(t){throw t}};async function b(){try{const e=new Headers,a=await n({url:"http://localhost:2000/auth/admin/users",method:"GET",headers:e,credentials:"include"});if(a.users)return a.users;throw new Error("Erreur lors de la récupération des utilisateurs")}catch(e){throw e}}async function m(e,a){try{const t=new Headers,o=await n({url:`http://localhost:2000/auth/admin/user/${e}`,method:"PUT",headers:t,body:a});if(o.success)return{success:!0,user:o.updatedUser,notification:o.notification};throw new Error("Erreur lors de la mise à jour de l'utilisateur")}catch(t){throw t}}export{g as R,c as a,b,N as c,T as d,D as e,M as f,i as g,y as h,S as l,O as s,m as u,L as v};
